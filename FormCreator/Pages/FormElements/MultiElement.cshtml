@using FormCreator.Models
@using FormCreator.Pages.Forms
@model FormCreator.Pages.FormElements.FormDisplayElementModel
@switch (Model.Mode)
{
    case FormDisplayMode.Edit:
        <div class="rounded-1 border-1 border-secondary border d-flex flex-column p-3 m-1">
            <input asp-for="Element.QuestionType" name="Form.FormElements[@Model.Element.Index].QuestionType" type="hidden" />
            <input asp-for="Element.Index" name="Form.FormElements[@Model.Element.Index].Index" type="hidden" />
            <div class="d-flex flex-row align-items-center justify-content-between">
                <h5 class="text-center">Multiple options choice</h5>
                <div class="d-flex flex-row align-items-center">
                    @if (Model.Element.Index != 0)
                    {
                        <a class="btn" asp-page-handler="MoveUp" asp-route-index="@Model.Element.Index">
                            <i class="bi bi-caret-up-fill text-black"></i>
                        </a>
                    }
                    @if (ViewData["fe_last"] != null && Model.Element.Index != (int)ViewData["fe_last"]!)
                    {
                        <a class="btn" asp-page-handler="MoveDown" asp-route-index="@Model.Element.Index">
                            <i class="bi bi-caret-down-fill text-black"></i>
                        </a>
                    }
                    <a class="btn btn-close" asp-page-handler="Remove" asp-route-index="@Model.Element.Index"></a>
                </div>
            </div>
            <div class="border-bottom flex-grow-1 border-dark"></div>

            <div class="form-group">
                <input name="Form.FormElements[@Model.Element.Index].Question" asp-for="Element.Question" class="form-control-plaintext mb-1 h4" />
                <span asp-validation-for="Element.Question" class="text-danger"></span>
            </div>
            <div class="form-group">
                <div id="checkButtons-@Model.Element.Index">
                    @for (int i = 0; i < Model.Element.Options.Count; i++)
                    {
                        bool correct = false;
                        List<int>? ints = (List<int>?)Model.Element.Answer;
                        if (ints == null) return;
                        correct = ints.Contains(i);
                        <div class="d-flex flex-row align-items-center">
                            <input value="@i"
                       class="form-check-input align-self-middle" type="checkbox" name="Form.FormElements[@Model.Element.Index].Answer" @(correct ? "checked" : "")>
                            <input type="text" asp-for="Element.Options[i]" name="Form.FormElements[@Model.Element.Index].Options" class="m-1 form-control w-auto flex-grow-1" />
                            <button class="btn btn-danger" onclick="dynamicPage('@Url.Page("/Forms/AlterForm","RemoveMultiple",new{oindex=@Model.Element.Index,iindex=i})',0)">Remove</button>
                        </div>
                    }
                </div>
            </div>
            <div class="form-group">
                <a class="btn btn-primary" asp-page-handler="AddMultiple" asp-route-index="@Model.Element.Index">Add Option</a>
            </div>
        </div>
        break;
    case FormDisplayMode.View:
        <div class="rounded-1 border-1 border-secondary border d-flex flex-column p-3 m-1">
            <input asp-for="Element.QuestionType" name="Submission.Submissions[@Model.Element.Index].QuestionType" type="hidden" />
            <input asp-for="Element.Index" name="Submission.Submissions[@Model.Element.Index].Index" type="hidden" />
            <div class="d-flex flex-row align-items-center justify-content-between">
                <h5 class="text-center">@Model.Element.Question</h5>
            </div>
            <div class="border-bottom flex-grow-1 border-dark"></div>
            <div class="form-group">
                <div id="checkButtons-@Model.Element.Index">
                    @for (int i = 0; i < Model.Element.Options.Count; i++)
                    {
                        <div class="d-flex flex-row align-items-center">
                            <input class="form-check-input align-self-middle" type="checkbox" value="@i" id="cb-@(Model.Element.Index)-@i" name="Submission.Submissions[@Model.Element.Index].Answer">
                            <label class="m-1 form-control-plaintext w-auto flex-grow-1 user-select-none" for="cb-@(Model.Element.Index)-@i">@Model.Element.Options[i]</label>
                        </div>
                    }
                </div>
            </div>
        </div>
        break;
    case FormDisplayMode.Submission:
        if (Model.Submission == null)
        {
            <span class="text-danger">Cannot display submission</span>
        }
        else
        {
            <div class="rounded-1 border-1 border-secondary border d-flex flex-column p-3 m-1">
                <div class="d-flex flex-row align-items-center justify-content-between">
                    <h5 class="text-center">@Model.Element.Question</h5>
                </div>
                <div class="border-bottom flex-grow-1 border-dark mb-1"></div>
                <div class="form-group">
                    <div id="checkButtons-@Model.Element.Index-@Model.GetHashCode()">
                        @for (int i = 0; i < Model.Element.Options.Count; i++)
                        {
                            bool correct = false;
                            List<int>? ints = (List<int>?)Model.Submission.Answer;
                            if (ints == null) return;
                            correct = ints.Contains(i);
                            <div class="d-flex flex-row align-items-center">
                                <input value="@i" onclick="javascript: return false;"
                       id="cb-@(Model.Element.Index)-@i-@Model.GetHashCode()"
                       class="form-check-input align-self-middle" type="checkbox" name="Form.FormElements[@Model.Element.Index].Answer" @(correct ? "checked" : "")>
                                <label class="m-1 form-control-plaintext w-auto flex-grow-1 user-select-none" for="cb-@(Model.Element.Index)-@i-@Model.GetHashCode()">@Model.Element.Options[i]</label>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
        break;
    case FormDisplayMode.SubmissionMultiQuestions:
        if (Model.MultiSubmissions == null || Model.MultiSubmissions.Count == 0)
        {
            <span class="text-danger">Cannot display submissions</span>
        }
        else
        {
            <div class="rounded-1 border-1 border-secondary border d-flex flex-column p-3 m-1">
                <div class="d-flex flex-row align-items-center justify-content-between">
                    <h5 class="text-center">@Model.Element.Question</h5>
                </div>
                <div class="border-bottom flex-grow-1 border-dark mb-1"></div>
                <div class="form-group gap-1 d-flex flex-column align-items-start">
                    @{
                        var answers = Model.MultiSubmissions.Select(x => (List<int>)x.Submission.Answer);
                        List<double> percentages = new List<double>(Model.Element.Options.Count);
                        for (int i = 0; i < Model.Element.Options.Count; i++)
                        {
                            double ticked = answers.Count(x => x.Contains(i));
                            percentages.Add(Math.Round((ticked / (double)answers.Count()) * 100));
                        }
                    }
                    @for (int i = 0; i < Model.Element.Options.Count; i++)
                    {
                        var cSubmission = Model.MultiSubmissions.Where(x => ((List<int>)x.Submission.Answer).Contains(i)).DistinctBy(x=> x.Id).ToArray();
                        string data = "";
                        @for(int j = 0; j < cSubmission.Count();j++)
                        {
                            FormDisplayElementModel.MSObject sub = cSubmission[j];
                            int count = Model.MultiSubmissions.Count(x => x.Id == sub.Id);
                            data += $"data-bs-uid[{j}]={sub.Id} data-bs-username[{j}]={sub.Username} data-bs-count[{j}]={count} ";
                        }
                        <button type="button" class="form-control w-auto" data-bs-toggle="modal" data-bs-target="#displaySubmission"
                        data-bs-count="@cSubmission.Count()" data-bs-option="@Model.Element.Options[i]" @data>
                            @Model.Element.Options[i] <span class="fw-bold">@percentages[i] %</span>
                        </button>
                    }
                </div>
            </div>
        }
        break;
    default:
        <span class="text-danger">Cannot display form element</span>
        break;
}